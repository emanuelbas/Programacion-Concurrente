5. 
(a)
El problema que puede darse es cuando el buffer esta vacio, el productor produce
y de forma atomica cuenta el elemento si tiene lugar en el buffer, ya que el ele
mento fue contado PERO AUN NO ALMACENADO el consumidor va a intentar consumirlo
En ese momento se va a encontrar con el buffer vacio y se rompe.

La solucion seria incluir de forma atomica que se cuente el elemento y ademas se alamacene, de forma analoga el consumidor no debe restar la variable sin extraer un elemento del buffer atomicamente.

En lugar de 
 <await (cant < N); cant++>  
 buffer[pri_vacia] = elemento;
 pri_vacia = (pri_vacia + 1) mod N;  

Agregar el elemento atomicamente a cuando se lo cuenta, corri la boquita.
 <await (cant < N); cant++;  
 buffer[pri_vacia] = elemento; >
 pri_vacia = (pri_vacia + 1) mod N; 

(b)
Si tuviera N productores necesito incluir la actualizacion de pri_vacia en la
 atomicidad. Ya que pri_vacia me indica donde va el proximo elemento antes no
tenia problemas pero ahora podria darse que un consumidor intente guardar un elemento en una posicion donde otro proceso ya guardo algo

En lugar de 
 <await (cant < N); cant++;  
 buffer[pri_vacia] = elemento; >
 pri_vacia = (pri_vacia + 1) mod N; 

Incluir la actualizacion de la posicion del siguiente en la atomicidad
 <await (cant < N); cant++  
 buffer[pri_vacia] = elemento;
 pri_vacia = (pri_vacia + 1) mod N;  > //Solo hay que correr la boquita